 
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
第一步： 指定依赖的仓库的位置：修改项目的 Gradle  如下：
buildscript
{
    repositories {
        google()
        jcenter()
        maven { url 'https://raw.githubusercontent.com/octopus-okan/libs/master' } //OPlayer 播放器的依赖的位置
    }
}
allprojects
{
    repositories {
        google()
        jcenter()
        maven { url 'https://raw.githubusercontent.com/octopus-okan/libs/master'} //OPlayer 播放器的依赖的位置
    }
}

/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
第二步： 引入依赖：修改模块的 Gradle  如下：
 dependencies {
    implementation 'com.google.code.gson:gson:2.8.5'                 //SessionManager  播放器必须的依赖
    implementation 'com.github.bumptech.glide:glide:3.8.0'           //SessionManager 播放器必须的依赖
    implementation 'com.zhuchao.android:libPlaySession:2.2:@aar'     //SessionManager 播放器必须的依赖
    implementation 'com.zhuchao.android:libDecodeCore:2.0:@aar'      //OPlayer 播放器必须的依赖
    implementation 'com.zhuchao.android:libNetUtil:2.0:@aar'         //OPlayer 播放器必须的依赖
    implementation 'com.zhuchao.android:libPlayUtil:2.1:@aar'        //OPlayer 播放器必须的依赖
    implementation 'com.zhuchao.android:libVideo:1.0:@aar'           //OPlayer 播放器必须的依赖
    implementation 'com.zhuchao.android:libCallbackEvent:1.0:@aar'   //OPlayer 播放器必须的依赖
    implementation 'com.zhuchao.android:libFileUtils:1.2:@aar'     //OPlayer 播放器必须的依赖
}

第三步：使用播放器,OPlayer播放器几乎可以解码所有格式的视频、音乐、图片、流媒体，OPlayer提供三种途径来对媒体进行播放和管理
  A:利用OPlayer管理播放单个媒体资源，非常的简单，首先定义
    private SurfaceView mSurfaceView;
    private OMedia oMedia;//封装单个媒体资源信息和播放行为
    oMedia = new OMedia("http://192.168.5.101/cc.mp4", null, null);//最后一个参数是个回调接口，可以获得播放器进度信息
    oMedia.with(this).playOn(mSurfaceView);
	
  B:利用OPlayerSessionManager会话管理器生成媒体库，OPlayer可以根据网络、本地、USB、FTP生成复杂的分类列表。
    //创建OPlayerSessionManager会话管理器，一个会话代表一个分类信息，比如本地的音乐，一般是在全局的Application中创建会话
	mSessionManager = new OPlayerSessionManager(this,null,null);
	//注意：这条语句执行完了OPlayer根据网络、本地、USB、FTP、生成播放列表，最后一个参数是个回调接口，通知播放列表创建完成，
	//OPlayerSessionManager的使用参考（MediaLibrary.java）

  C:利用PlayManager类播放媒体资源，PlayManager是一个应用案例，通过OPlayerSessionManager或指定目录获得媒体资源并播放。
    PlayManager可以直接使用，也可以做为参考定制更专业播放器。

	

